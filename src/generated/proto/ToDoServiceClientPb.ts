/**
 * @fileoverview gRPC-Web generated client stub for todoPackage
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: proto/toDo.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_toDo_pb from '../proto/toDo_pb';


export class TodoClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorcreateTodo = new grpcWeb.MethodDescriptor(
    '/todoPackage.Todo/createTodo',
    grpcWeb.MethodType.UNARY,
    proto_toDo_pb.TodoItem,
    proto_toDo_pb.TodoItem,
    (request: proto_toDo_pb.TodoItem) => {
      return request.serializeBinary();
    },
    proto_toDo_pb.TodoItem.deserializeBinary
  );

  createTodo(
    request: proto_toDo_pb.TodoItem,
    metadata: grpcWeb.Metadata | null): Promise<proto_toDo_pb.TodoItem>;

  createTodo(
    request: proto_toDo_pb.TodoItem,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_toDo_pb.TodoItem) => void): grpcWeb.ClientReadableStream<proto_toDo_pb.TodoItem>;

  createTodo(
    request: proto_toDo_pb.TodoItem,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_toDo_pb.TodoItem) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/todoPackage.Todo/createTodo',
        request,
        metadata || {},
        this.methodDescriptorcreateTodo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/todoPackage.Todo/createTodo',
    request,
    metadata || {},
    this.methodDescriptorcreateTodo);
  }

  methodDescriptorreadTodos = new grpcWeb.MethodDescriptor(
    '/todoPackage.Todo/readTodos',
    grpcWeb.MethodType.UNARY,
    proto_toDo_pb.voidNoParams,
    proto_toDo_pb.TodoItems,
    (request: proto_toDo_pb.voidNoParams) => {
      return request.serializeBinary();
    },
    proto_toDo_pb.TodoItems.deserializeBinary
  );

  readTodos(
    request: proto_toDo_pb.voidNoParams,
    metadata: grpcWeb.Metadata | null): Promise<proto_toDo_pb.TodoItems>;

  readTodos(
    request: proto_toDo_pb.voidNoParams,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_toDo_pb.TodoItems) => void): grpcWeb.ClientReadableStream<proto_toDo_pb.TodoItems>;

  readTodos(
    request: proto_toDo_pb.voidNoParams,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_toDo_pb.TodoItems) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/todoPackage.Todo/readTodos',
        request,
        metadata || {},
        this.methodDescriptorreadTodos,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/todoPackage.Todo/readTodos',
    request,
    metadata || {},
    this.methodDescriptorreadTodos);
  }

  methodDescriptorreadTodosStream = new grpcWeb.MethodDescriptor(
    '/todoPackage.Todo/readTodosStream',
    grpcWeb.MethodType.SERVER_STREAMING,
    proto_toDo_pb.voidNoParams,
    proto_toDo_pb.TodoItem,
    (request: proto_toDo_pb.voidNoParams) => {
      return request.serializeBinary();
    },
    proto_toDo_pb.TodoItem.deserializeBinary
  );

  readTodosStream(
    request: proto_toDo_pb.voidNoParams,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<proto_toDo_pb.TodoItem> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/todoPackage.Todo/readTodosStream',
      request,
      metadata || {},
      this.methodDescriptorreadTodosStream);
  }

  methodDescriptorcreateMultipleTodos = new grpcWeb.MethodDescriptor(
    '/todoPackage.Todo/createMultipleTodos',
    grpcWeb.MethodType.UNARY,
    proto_toDo_pb.TodoItems,
    proto_toDo_pb.TodoItems,
    (request: proto_toDo_pb.TodoItems) => {
      return request.serializeBinary();
    },
    proto_toDo_pb.TodoItems.deserializeBinary
  );

  createMultipleTodos(
    request: proto_toDo_pb.TodoItems,
    metadata: grpcWeb.Metadata | null): Promise<proto_toDo_pb.TodoItems>;

  createMultipleTodos(
    request: proto_toDo_pb.TodoItems,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_toDo_pb.TodoItems) => void): grpcWeb.ClientReadableStream<proto_toDo_pb.TodoItems>;

  createMultipleTodos(
    request: proto_toDo_pb.TodoItems,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_toDo_pb.TodoItems) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/todoPackage.Todo/createMultipleTodos',
        request,
        metadata || {},
        this.methodDescriptorcreateMultipleTodos,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/todoPackage.Todo/createMultipleTodos',
    request,
    metadata || {},
    this.methodDescriptorcreateMultipleTodos);
  }

}

